// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: upsert.sql

package data

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const upsertAccountGroup = `-- name: UpsertAccountGroup :exec
INSERT INTO account_groups
(uuid, display_name, country, locality, postal_code, street_address, region, external_id, active, created_at)
VALUES
    ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
ON CONFLICT
    (external_id)
DO UPDATE SET
  display_name = excluded.display_name,
  country = excluded.country,
  locality = excluded.locality,
  postal_code = excluded.postal_code,
  street_address = excluded.street_address,
  region = excluded.region,
  active = excluded.active
`

type UpsertAccountGroupParams struct {
	Uuid          uuid.UUID      `json:"uuid"`
	DisplayName   string         `json:"display_name"`
	Country       string         `json:"country"`
	Locality      string         `json:"locality"`
	PostalCode    sql.NullString `json:"postal_code"`
	StreetAddress string         `json:"street_address"`
	Region        string         `json:"region"`
	ExternalID    string         `json:"external_id"`
	Active        bool           `json:"active"`
	CreatedAt     time.Time      `json:"created_at"`
}

func (q *Queries) UpsertAccountGroup(ctx context.Context, arg UpsertAccountGroupParams) error {
	_, err := q.db.ExecContext(ctx, upsertAccountGroup,
		arg.Uuid,
		arg.DisplayName,
		arg.Country,
		arg.Locality,
		arg.PostalCode,
		arg.StreetAddress,
		arg.Region,
		arg.ExternalID,
		arg.Active,
		arg.CreatedAt,
	)
	return err
}
